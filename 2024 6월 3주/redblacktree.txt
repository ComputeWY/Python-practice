레드블랙트리 (left < parent < right)

삽입

1. 모든노드는 빨강 혹은 검정
2. 외부 노드는 모두 검정
3. 빨강노드 연속 x
4. 루트에서 리프까지의 모든 검정의 갯수는같다

1. 레드로만 삽입가능
2. 레드가 연속일경우 삼촌으로 판단
 1. 삼촌이 검은색 - restructuting
 2. 삼촌이 빨강색 = recoloring

 restructuting
1. New, Parent, Grandparent를 오름차순으로 정리
2. 셋 중 중간값을 부모로 만들고 나머지를 자식으로
3. 새로 부모가 된 노드를 검은색, 나머지를 빨강


 recoloring
1. Parent, Uncle을 검은색으로 바꾼다
 1.Grandparent이 루트라면 검은색
 2.Grandparent를 빨강색으로 바꿧을 때 
 double red가 발생한다면 또 restructuting 나 recoloring 진행
 -> 나오지 않을 때 까지 반복

삭제 과정
노드를 삭제하는 과정은 두 가지 주요 단계로 나눌 수 있습니다:

BST 삭제 단계: 이진 탐색 트리(BST)에서와 같은 방법으로 노드를 삭제합니다.
레드-블랙 트리 속성 복구 단계: 삭제 후 트리의 속성을 유지하기 위해 필요하면 추가 조정을 합니다.
1. BST 삭제 단계
BST에서 노드를 삭제하는 방법은 다음과 같습니다:

단말 노드 삭제: 단순히 노드를 제거합니다.
자식이 하나인 노드 삭제: 그 자식을 삭제할 노드의 위치에 놓습니다.
자식이 둘인 노드 삭제: 삭제할 노드의 후계자를 찾아 삭제할 노드의 위치에 놓고 후계자를 삭제합니다.
2. 레드-블랙 트리 속성 복구 단계
삭제한 노드가 흑색 노드라면, 레드-블랙 트리의 흑색 높이 속성이 위반될 수 있습니다. 이 경우, "이중 흑색 노드" 개념을 사용하여 트리의 균형을 복구합니다.

이중 흑색 노드 복구 과정
이중 흑색 노드는 흑색 노드가 삭제된 자리나 흑색 노드가 하나 줄어든 자리를 의미합니다. 이 문제를 해결하기 위해 다음과 같은 경우를 처리합니다:

형제 노드가 적색인 경우:

형제의 색을 흑색으로 바꾸고 부모의 색을 적색으로 바꿉니다. 그런 다음, 부모를 기준으로 좌회전 또는 우회전합니다. 이 과정을 통해 새로운 균형 상태를 만듭니다.
형제 노드가 흑색이고 형제의 자식들이 모두 흑색인 경우:

형제의 색을 적색으로 바꾸고 부모 노드를 이중 흑색 노드로 승격시킵니다. 이 과정을 반복적으로 적용하여 트리의 균형을 맞춥니다.
형제 노드가 흑색이고 형제의 자식 중 적색 노드가 있는 경우:

적절한 회전을 통해 균형을 맞춥니다. 회전 후, 부모 노드와 형제 노드의 색을 조정하여 트리의 모든 속성을 만족시킵니다.

   https://code-lab1.tistory.com/62
   https://gwpaeng.tistory.com/309

